from handlers.product_advertising import advertise_product, advertise_product_direct
from intent_model import load_model
from telegram import ReplyKeyboardMarkup, ReplyKeyboardRemove
from datetime import datetime

from utils.logger import logger

model, vectorizer = load_model()
known_users = set()

reply_keyboard = [
    ["–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ", "–î–µ–ª–æ–≤—ã–µ", "–ú–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ"],
    ["–ù–µ–¥–æ—Ä–æ–≥–∏–µ", "Casio", "–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ"]
]
keyboard_markup = ReplyKeyboardMarkup(reply_keyboard, one_time_keyboard=True, resize_keyboard=True)

async def chat(update, context, recognized_text=None):
    user_id = update.effective_chat.id
    known_users.add(user_id)
    logger.info(f"[{user_id}] Received message: {update.message.text}")
    user_message = recognized_text.lower() if recognized_text else update.message.text.lower()

    X = vectorizer.transform([user_message])
    intent = model.predict(X)[0]

    if intent == "greeting":
        context.user_data.clear()
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –ø–æ–¥–æ–±—Ä–∞—Ç—å –∏–¥–µ–∞–ª—å–Ω—ã–µ —á–∞—Å—ã –¥–ª—è –≤–∞—Å. ‚åö\n"
            "–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —á–∞—Å–æ–≤:",
            reply_markup=keyboard_markup
        )
        context.user_data["awaiting_category"] = True
        return

    if context.user_data.get("awaiting_category"):
        text_to_key = {
            "—Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ": "sport_watch",
            "–¥–µ–ª–æ–≤—ã–µ": "business_watch",
            "–º–µ—Ö–∞–Ω–∏—á–µ—Å–∫–∏–µ": "mechanical_watch",
            "–Ω–µ–¥–æ—Ä–æ–≥–∏–µ": "cheap",
            "casio": "brand_casio",
            "–ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ": "product"
        }
        selected = text_to_key.get(user_message)
        if selected:
            context.user_data["category"] = selected
            context.user_data["category_name"] = user_message
            context.user_data["awaiting_category"] = False
            context.user_data["awaiting_budget"] = True
            await update.message.reply_text(
                "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤–∞—à –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000, 15000):",
                reply_markup=ReplyKeyboardRemove()
            )
            return

    if context.user_data.get("awaiting_budget"):
        try:
            budget = int(''.join(filter(str.isdigit, user_message)))
            context.user_data["max_price"] = budget
            context.user_data["awaiting_budget"] = False
            await update.message.reply_text(f"–ò—â–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–æ {budget}‚ÇΩ...")
            await advertise_product(update, context)
            return
        except:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –±—é–¥–∂–µ—Ç —Ü–∏—Ñ—Ä–∞–º–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 10000).")
            return

    if intent == "product":
        await advertise_product(update, context)
        return

    if intent == "goodbye":
        await update.message.reply_text("–î–æ –≤—Å—Ç—Ä–µ—á–∏! –ë—É–¥—É —Ä–∞–¥ —Å–Ω–æ–≤–∞ –ø–æ–º–æ—á—å üôÇ")
        return

    if intent == "time":
        now = datetime.now().strftime("%H:%M")
        await update.message.reply_text(f"–°–µ–π—á–∞—Å {now}")
        return

    keywords = {
        "–≤–æ–¥": "–≤–æ–¥–æ–Ω–µ–ø—Ä–æ–Ω–∏—Ü–∞–µ–º—ã–µ",
        "–ø—É–ª—å—Å": "—Å –ø—É–ª—å—Å–æ–º–µ—Ç—Ä–æ–º",
        "–∫–ª–∞—Å—Å": "–∫–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–µ",
        "—Å–æ–≤—Ä–µ–º": "—Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ",
        "–∞–≤—Ç–æ": "—Å –∞–≤—Ç–æ–ø–æ–¥–∑–∞–≤–æ–¥–æ–º",
        "—Ä—É—á–Ω": "—Å —Ä—É—á–Ω—ã–º –∑–∞–≤–æ–¥–æ–º"
    }

    if "category" in context.user_data:
        for word, feature in keywords.items():
            if word in user_message:
                context.user_data["feature"] = feature
                await update.message.reply_text(f"–£—á—Ç—É –≤–∞—à–µ –ø–æ–∂–µ–ª–∞–Ω–∏–µ –ø–æ {feature} —Ñ—É–Ω–∫—Ü–∏—è–º.")
                await advertise_product(update, context)
                return

    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–∞—Å–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è –∫–Ω–æ–ø–∫–∏:",
        reply_markup=keyboard_markup
    )
    context.user_data["awaiting_category"] = True

async def send_periodic_advertisement(context):
    chat_id = context.job.chat_id
    user_data = {}

    await advertise_product_direct(chat_id, context.bot, user_data)
